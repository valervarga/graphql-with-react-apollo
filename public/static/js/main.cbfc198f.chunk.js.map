{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_success","launch_date_local","react_default","a","createElement","className","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_useQuery","useQuery","loading","error","data","Fragment","components_MissionKey","launches","map","components_LaunchItem","key","LAUNCH_QUERY","Launch_templateObject","Launch","match","params","variables","parseInt","_ref2","launch_year","_ref2$rocket","rocket","rocket_id","rocket_name","rocket_type","console","log","client","AplloClient","uri","App","react_common_esm","src","logo","alt","style","width","display","margin","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbfc198f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst LaunchItem = ({ launch: { flight_number, mission_name, launch_success, launch_date_local } }) => {\r\n\treturn (\r\n\t\t<div className=\"card card-body mb-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-9\">\r\n\t\t\t\t\t<h4>Mission: <span className={ launch_success ? 'text-success': 'text-danger' }>{ mission_name }</span></h4>\r\n\t\t\t\t\t<p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-3\">\r\n\t\t\t\t\t<NavLink className=\"btn btn-secondary\" to={`/launch/${flight_number}`}>Launch Details</NavLink>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default LaunchItem;\r\n","import React from 'react'\r\n\r\nconst MissionKey = () => (\r\n\t<div className=\"my-3\">\r\n\t\t<p>\r\n\t\t\t<span className=\"px-3 mr2 bg-success\" /> &nbsp;&nbsp; = Success\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\t<span className=\"px-3 mr2 bg-danger\" /> &nbsp;&nbsp; = Failed\r\n\t\t</p>\r\n\t</div>\r\n);\r\n\r\nexport default MissionKey;\r\n","import React from 'react'\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n\tquery LaunchesQuery {\r\n\t\tlaunches {\r\n\t\t\tflight_number,\r\n\t\t\tmission_name,\r\n\t\t\tlaunch_success,\r\n\t\t\tlaunch_date_local\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst Launches = () => {\r\n\tconst { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error: </p>;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<MissionKey />\r\n\t\t\t{\r\n\t\t\t\tdata.launches.map(launch => (\r\n\t\t\t\t\t<LaunchItem key={launch.flight_number} launch={launch} />\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Launches;\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n\tquery LaunchQuery($flight_number: Int!) {\r\n\t\tlaunch(flight_number: $flight_number) {\r\n\t\t\tmission_name,\r\n\t\t\tlaunch_year,\r\n\t\t\tlaunch_date_local,\r\n\t\t\tlaunch_success,\r\n\t\t\trocket {\r\n\t\t\t\trocket_id,\r\n\t\t\t\trocket_name,\r\n\t\t\t\trocket_type\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst Launch = ({ match: { params: { flight_number } } }) => {\r\n\tconst { loading, error, data } = useQuery(\r\n\t\tLAUNCH_QUERY,\r\n\t\t{\r\n\t\t\tvariables: { flight_number: parseInt(flight_number) }\r\n\t\t}\r\n\t);\r\n\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error: </p>;\r\n\r\n\tconst {\r\n\t\tmission_name,\r\n\t\tlaunch_year,\r\n\t\tlaunch_success,\r\n\t\trocket: {\r\n\t\t\trocket_id,\r\n\t\t\trocket_name,\r\n\t\t\trocket_type\r\n\t\t}\r\n\t} = data && data.launch;\r\n\r\n\tconsole.log({ mission_name });\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t<h1 className=\"display-4 my-3\">\r\n\t\t\t<span className=\"text-dark\">Mission:</span> {mission_name}\r\n\t\t</h1>\r\n\t\t<h4 className=\"mb-3\">Launch Details</h4>\r\n\t\t<ul className=\"list-group\">\r\n\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\tFlight Number: {flight_number}\r\n\t\t\t</li>\r\n\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\tLaunch Year: {launch_year}\r\n\t\t\t</li>\r\n\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\tLaunch Successful:{' '}\r\n\t\t\t\t<span className={ launch_success ? 'text-success' : 'text-danger' }>\r\n\t\t\t\t\t{ launch_success ? 'Yes' : 'No' }\r\n\t\t\t\t</span>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\r\n\t\t<h4 className=\"my-3\">Rocket Details</h4>\r\n\t\t<ul className=\"list-group\">\r\n\t\t\t<li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\tRocket Name: {rocket_name}\r\n\t\t\t</li>\r\n\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\tRocket Type: {rocket_type}\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<hr />\r\n\t\t<NavLink to=\"/\" className=\"btn btn-secondary\">\r\n\t\t\tBack\r\n\t\t</NavLink>\r\n\t</div>\r\n\t)\r\n};\r\n\r\nexport default Launch;\r\n","import React from 'react';\nimport AplloClient from 'apollo-boost';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport './App.css';\nimport logo from './logo.png';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\n\nconst client = new AplloClient({\n  uri: 'http://localhost:5000/graphql'\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <BrowserRouter>\n      <div className=\"container\">\n        <img\n          src={logo}\n          alt=\"SpaceX\"\n          style={{ width: 300, display: 'block', margin: 'auto' }}\n        />\n\n        <Route exact path=\"/\" component={Launches} />\n        <Route path=\"/launch/:flight_number\" component={Launch} />\n      </div>\n    </BrowserRouter>\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}